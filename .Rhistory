score <- sapply(words_cohesion, score, USE.NAMES = FALSE)
score <- function(word){
BASE <- words_length[[as.character(nchar(word)+1)]]
PATTEN <- paste("^", word, sep = '')
matchs <- grep(PATTEN, BASE, value = TRUE)
pre <- mean(-log2(words_weight[matchs]))
PATTEN <- paste(word, "$", sep = '')
matchs <- grep(PATTEN, BASE, value = TRUE)
post <- mean(-log2(words_weight[matchs]))
condition <- any(is.na(c(pre, post)))
return(ifelse(condition, -Inf, min(pre, post)))
}
order_val <- sapply(words_cohesion, score, USE.NAMES = FALSE)
order_val
names(order_val) <- words_cohesion
order_val
tail(names(sort(order_val)), 100)
index <- unlist(words_length[2:5])
index
word_freq[index]
sort(word_freq[index])
tail(sort(word_freq[index]), 10)
index <- unlist(words_length[2:4])
words <- names(tail(sort(word_freq[index]), 300))
words
cohesion_val <- sapply(words, cohesion, USE.NAMES = FALSE)
cohesion_val
sort(cohesion_val)
words_cohesion <- names(cohesion_val)
words_cohesion
index <- unlist(words_length[2:4])
words <- names(tail(sort(word_freq[index]), 1000))
cohesion_val <- sapply(words, cohesion, USE.NAMES = FALSE)
cohesion_val
words_cohesion <- names(tail(sort(cohesion_val)),500)
words_cohesion <- names(tail(sort(cohesion_val),500))
words_cohesion
plot(piece)
plot(piece_clean)
index
word_freq[index] > 1000
word_freq[word_freq[index] > 1000]
word_freq[index] > 1000
names(word_freq[index] > 1000)
word_freq[index] > 1000
words_2_4 <- unlist(words_length[2:4])
index <- word_freq[words_2_4] > 1000
index
names(word_freq)[index]
names(word_freq)
index
names(word_freq)[index]
words_2_4
word_freq[words_2_4] > 1000
index <- word_freq[words_2_4] > 1000
names(word_freq)
names(word_freq)[1]
names(word_freq)[2]
names(word_freq)[index]
names(word_freq)
class(names(word_freq))
class(index)
word_freq[words_2_4]
class(word_freq[words_2_4])
word_freq[words_2_4]
word_freq[words_2_4] > 1000
index <- word_freq[words_2_4] > 1000
index <- as.vector(index)
index
names(word_freq)
names(word_freq)[index]
tmp <- names(word_freq)
as.character(tmp)
tmp <- as.character(tmp)
class(tmp)
tmp[index]
words_2_4 <- unlist(words_length[2:4])
words <- names(tail(sort(word_freq[words_2_4]), 1000))
words
cohesion_val <- sapply(words, cohesion, USE.NAMES = FALSE)
cohesion_val
sort(cohesion_val)
order_val <- sapply(words, score, USE.NAMES = FALSE)
order_val
names(order_val) <- words
sort(order_val)
word <- '富邦人壽'
score
edit(score)
word_2_4 <- unlist(words_length[2:4])
words <- names(tail(sort(word_freq[word_2_4]), 1000))
words
cohesion_val <- sapply(words, cohesion, USE.NAMES = FALSE)
words_cohesion <- names(cohesion_val)
words_cohesion
order_val <- sapply(words_cohesion, score, USE.NAMES = FALSE)
names(order_val) <- words_cohesion
sort(order_val))
sort(order_val)
select_words <- tail(sort(word_freq[word_2_4]), 1000)
words <- names(select_words)
words
words
order_val[words]
cohesion_val[words]
cohesion_val[words] + order_val[words]
cohesion_val[words]
(cohesion_val[words] + order_val[words]) / 2
val <- (cohesion_val[words] + order_val[words]) / 2
sort(val)
words_cohesion
sort(cohesion_val)
cohesion <- function(word){
seg <- segmentWord(word)
val <- sapply(seg, function(x){
words_weight[x[1]]*words_weight[x[2]]
})
return(words_weight[word] / min(val))
}
cohesion_val <- sapply(words, cohesion, USE.NAMES = FALSE)
cohesion_val
words_cohesion <- names(cohesion_val)
head(sort(cohesion_val), 20)
head(sort(cohesion_val), 100)
tail(sort(cohesion_val), 500)
cohesion_val
tail(sort(cohesion_val), 500)
words_cohesion <- (tail(sort(cohesion_val), 500))
order_val <- sapply(words_cohesion, score, USE.NAMES = FALSE)
sort(order_val)
tail(sort(order_val), 100)
order_val <- sapply(words, score, USE.NAMES = FALSE)
order_val
names(order_val) <- words
order_val
tail(sort(order_val),50)
head(sort(order_val),50)
word <- '北市套房'
BASE <- words_length[[as.character(nchar(word)+1)]]
PATTEN <- paste("^", word, sep = '')
matchs <- grep(PATTEN, BASE, value = TRUE)
pre <- mean(-log2(words_weight[matchs]))
matchs
BASE <- words_length[[as.character(nchar(word)+1)]]
PATTEN1 <- paste("^", word, sep = '')
matchs1 <- grep(PATTEN, BASE, value = TRUE)
pre <- mean(-log2(words_weight[matchs]))
PATTEN2 <- paste(word, "$", sep = '')
matchs2 <- grep(PATTEN, BASE, value = TRUE)
post <- mean(-log2(words_weight[matchs]))
matchs1
matchs2
BASE <- words_length[[as.character(nchar(word)+1)]]
PATTEN1 <- paste("^", word, sep = '')
matchs1 <- grep(PATTEN1, BASE, value = TRUE)
pre <- mean(-log2(words_weight[matchs1]))
PATTEN2 <- paste(word, "$", sep = '')
matchs2 <- grep(PATTEN2, BASE, value = TRUE)
post <- mean(-log2(words_weight[matchs2]))
matchs1
matchs2
is.na(c(pre,post))
c(pre, post)
index <- is.na(c(pre, post))
c(pre, post)[index]
c(pre, post)[!index]
score <- function(word){
BASE <- words_length[[as.character(nchar(word)+1)]]
PATTEN1 <- paste("^", word, sep = '')
matchs1 <- grep(PATTEN1, BASE, value = TRUE)
pre <- mean(-log2(words_weight[matchs1]))
PATTEN2 <- paste(word, "$", sep = '')
matchs2 <- grep(PATTEN2, BASE, value = TRUE)
post <- mean(-log2(words_weight[matchs2]))
index <- is.na(c(pre, post))
condition <- any(index)
return(ifelse(condition, c(pre, post)[index], min(pre, post)))
}
order_val <- sapply(words, score, USE.NAMES = FALSE)
head(sort(order_val),50)
names(order_val) <- words
order_val
head(sort(order_val),50)
tail(sort(order_val),50)
plot(order_val)
order_val
order_val > 11
order_val[order_val > 11]
sort(order_val[order_val > 11])
w2 <- names(sort(order_val[order_val > 11]))
sapply(w2, cohesion, USE.NAMES = FALSE)
v3 <- sapply(w2, cohesion, USE.NAMES = FALSE)
tail(sort(v3),100)
w2
plot(order_val)
sort(order_val[order_val > 12])
words
order_val <- sapply(words, score, USE.NAMES = FALSE)
names(order_val) <- words
sort(order_val)
length(words)
order_val <- sapply(words, score, USE.NAMES = FALSE)
sort(order_val[order_val > 12])
order_val <- sapply(words, score, USE.NAMES = FALSE)
names(order_val) <- words
sort(order_val)
N <- sum(word_freq[words_length[['1']]])
cohesion <- function(word){
seg <- segmentWord(word)
val <- sapply(seg, function(x){
#words_weight[x[1]]*words_weight[x[2]]
log2(N) + log2(word) - log2(x[1]) - log2(x[2])
})
#return(words_weight[word] / min(val))
return min(val)
}
seg <- segmentWord(word)
word
val <- sapply(seg, function(x){
#words_weight[x[1]]*words_weight[x[2]]
log2(N) + log2(word) - log2(x[1]) - log2(x[2])
})
seg <- segmentWord(word)
val <- sapply(seg, function(x){
#words_weight[x[1]]*words_weight[x[2]]
f_word <- word_freq[word]
f_x1 <- word_freq[x[1]]
f_x2 <- word_freq[x[2]]
mi <- log2(N) + log2(f_word) - log2(f_x1) - log2(f_x2)
return(mi)
})
seg <- segmentWord(word)
val <- sapply(seg, function(x){
#words_weight[x[1]]*words_weight[x[2]]
f_word <- word_freq[word]
f_x1 <- word_freq[x[1]]
f_x2 <- word_freq[x[2]]
mi <- log2(N) + log2(f_word) - log2(f_x1) - log2(f_x2)
return(mi)
})
seg
val
seg
cohesion <- function(word){
seg <- segmentWord(word)
val <- sapply(seg, function(x){
#words_weight[x[1]]*words_weight[x[2]]
f_word <- word_freq[word]
f_x1 <- word_freq[x[1]]
f_x2 <- word_freq[x[2]]
mi <- log2(N) + log2(f_word) - log2(f_x1) - log2(f_x2)
return(mi)
})
#return(words_weight[word] / min(val))
return min(val)
}
val <- sapply(seg, function(x){
#words_weight[x[1]]*words_weight[x[2]]
f_word <- word_freq[word]
f_x1 <- word_freq[x[1]]
f_x2 <- word_freq[x[2]]
mi <- log2(N) + log2(f_word) - log2(f_x1) - log2(f_x2)
return(mi)
})
val
min(val)
cohesion <- function(word){
seg <- segmentWord(word)
val <- sapply(seg, function(x){
#words_weight[x[1]]*words_weight[x[2]]
f_word <- word_freq[word]
f_x1 <- word_freq[x[1]]
f_x2 <- word_freq[x[2]]
mi <- log2(N) + log2(f_word) - log2(f_x1) - log2(f_x2)
return(mi)
})
#return(words_weight[word] / min(val))
return (min(val))
}
w2 <- sapply(words, cohesion, USE.NAMES = FALSE)
w2
names(w2) <- words
sort(w2)
N
words_length[['1']]
word_freq[nchar(names(word_freq))==1]
sum(word_freq[nchar(names(word_freq))==1])
sort(w2)
plot(w2)
head(sort(w2), 20)
head(sort(w2), 50)
nchar(names(head(sort(w2), 50)))
head(sort(w2), 100)
head(sort(w2), 500)
disorder <- function(word){
BASE <- words_length[[as.character(nchar(word)+1)]]
PATTEN1 <- paste("^", word, sep = '')
matchs1 <- grep(PATTEN1, BASE, value = TRUE)
pre <- mean(-log2(words_weight[matchs1]))
PATTEN2 <- paste(word, "$", sep = '')
matchs2 <- grep(PATTEN2, BASE, value = TRUE)
post <- mean(-log2(words_weight[matchs2]))
index <- is.na(c(pre, post))
condition <- any(index)
return(ifelse(condition, c(pre, post)[index], min(pre, post)))
}
disorder_val <- sapply(words, disorder, USE.NAMES = FALSE)
names(order_val) <- words
sort(order_val)
plot(disorder_val)
order_val[order_val > 12]
order_val > 12
index <- order_val > 12
names(order_val)[index]
names(disorder_val)
disorder_val
names(order_val) <- words
sort(order_val)
names(disorder_val)
disorder_val
names(order_val) <- words
sort(order_val)
names(disorder_val)
names(order_val) <- words
disorder_val <- sapply(words, disorder, USE.NAMES = FALSE)
names(disorder_val) <- words
sort(disorder_val)
sort(disorder_val)
sort(disorder_val) > 12
index <- sort(disorder_val) > 12
names(disorder_val)
names(disorder_val)[index]
piece <- c()
for(i in 1:length(docs)){
piece <- append(piece, ngram(docs[i], 1))
piece <- append(piece, ngram(docs[i], 2))
piece <- append(piece, ngram(docs[i], 3))
piece <- append(piece, ngram(docs[i], 4))
piece <- append(piece, ngram(docs[i], 5))
piece <- append(piece, ngram(docs[i], 6))
}
piece_clean <- piece
word_freq <- table(piece_clean)
words_length <-
list(
"1" = names(word_freq[nchar(names(word_freq))==1]),
"2" = names(word_freq[nchar(names(word_freq))==2]),
"3" = names(word_freq[nchar(names(word_freq))==3]),
"4" = names(word_freq[nchar(names(word_freq))==4]),
"5" = names(word_freq[nchar(names(word_freq))==5]),
"6" = names(word_freq[nchar(names(word_freq))==6])
)
words_weight <- word_freq / sum(word_freq[words_length[['1']]])
N <- sum(word_freq[words_length[['1']]])
N <- sum(word_freq[words_length[['1']]])
words_weight <- word_freq / N
words_weight
N <- sum(word_freq[words_length[['1']]])
words_weight <- word_freq / N
disorder <- function(word){
BASE <- words_length[[as.character(nchar(word)+1)]]
PATTEN1 <- paste("^", word, sep = '')
matchs1 <- grep(PATTEN1, BASE, value = TRUE)
pre <- mean(-log2(words_weight[matchs1]))
PATTEN2 <- paste(word, "$", sep = '')
matchs2 <- grep(PATTEN2, BASE, value = TRUE)
post <- mean(-log2(words_weight[matchs2]))
index <- is.na(c(pre, post))
condition <- any(index)
return(ifelse(condition, c(pre, post)[index], min(pre, post)))
}
word_2_5 <- unlist(words_length[2:5])
select_words <- tail(sort(word_freq[word_2_5]), 1000)
words <- names(select_words)
#cohesion_val <- sapply(words, cohesion, USE.NAMES = FALSE)
#words_cohesion <- names(cohesion_val)
disorder_val <- sapply(words, disorder, USE.NAMES = FALSE)
names(disorder_val) <- words
sort(disorder_val)
plot(disorder_val)
index <- disorder_val > 12
names(disorder_val)[index]
index <- disorder_val > 12
test_words <- names(disorder_val)[index]
test_words
disorder_val
disorder_val > 12
?which
which(disorder_val > 12)
test_words <- which(disorder_val > 12)
test_words
word_2_5
word_freq[word_2_5]
plot(word_freq[word_2_5])
which(word_freq[word_2_5] > 5)
word_2_5 <- unlist(words_length[2:5])
#select_words <- tail(sort(word_freq[word_2_5]), 1000)
#words <- names(select_words)
words <- which(word_freq[word_2_5] > 5)
#cohesion_val <- sapply(words, cohesion, USE.NAMES = FALSE)
#words_cohesion <- names(cohesion_val)
disorder_val <- sapply(words, disorder, USE.NAMES = FALSE)
names(disorder_val) <- words
sort(disorder_val)
test_words <- which(disorder_val > 12)
test_words
words
names(words)
words <- names(which(word_freq[word_2_5] > 5))
words
words <- names(which(word_freq[word_2_5] > 3))
disorder_val <- sapply(words, disorder, USE.NAMES = FALSE)
names(disorder_val) <- words
sort(disorder_val)
which(disorder_val > 12)
test_words <- names(which(disorder_val > 12))
test_words
word_2_5 <- unlist(words_length[2:5])
#select_words <- tail(sort(word_freq[word_2_5]), 1000)
#words <- names(select_words)
words <- names(which(word_freq[word_2_5] > 2))
#cohesion_val <- sapply(words, cohesion, USE.NAMES = FALSE)
#words_cohesion <- names(cohesion_val)
disorder_val <- sapply(words, disorder, USE.NAMES = FALSE)
names(disorder_val) <- words
sort(disorder_val)
test_words <- names(which(disorder_val > 12))
test_words
sapply(test_words, cohesion, USE.NAMES = FALSE)
w2 <- sapply(test_words, cohesion, USE.NAMES = FALSE)
names(w2) <- test_words
w2
sort(w2)
cohesion_val <- sapply(test_words, cohesion, USE.NAMES = FALSE)
sort(cohesion_val)
names(cohesion) <- test_words
names(cohesion_val) <- test_words
names(cohesion_val) <- test_words
sort(cohesion_val)
plot(cohesion_val)
test_words_2 <- names(which(cohesion_val > 2))
test_words_2
test_words_2 <- names(which(cohesion_val > 3))
test_words_2
library(RSelenium)
pJS <- phantom()
Sys.sleep(5) # give the binary a moment
remDr <- remoteDriver(browserName = 'phantomjs')
remDr$open()
pJS <- phantom()
Sys.sleep(5) # give the binary a moment
remDr <- remoteDriver(browserName = 'phantomjs')
remDr$open()
pJS <- phantom()
Sys.sleep(5) # give the binary a moment
remDr <- remoteDriver(browserName = 'phantomjs')
remDr$open()
pJS <- phantom()
pJS <- phantom()
pJS <- phantom()
library(RSelenium)
pJS <- phantom()
?phantom
pJS <- phantom()
pJS <- phantom()
pJS <- phantom('~/Downloads/phantomjs-1.9.7-linux-x86_64/bin/phantomjs')
pJS <- phantom('~/Downloads/phantomjs-1.9.7-linux-x86_64/bin')
pJS <- phantom(pjs_cmd = '~/Downloads/phantomjs-1.9.7-linux-x86_64/bin')
pJS <- phantom(pjs_cmd = 'phantomjs')
pJS <- phantom()
pJS <- phantom()
pJS <- phantom()
pJS <- phantom('~/Downloads/phantomjs-1.9.7-linux-x86_64/bin/')
pJS <- phantom('~/Downloads/phantomjs-1.9.7-linux-x86_64/bin/phantomjs')
require(RSelenium)
RSelenium::startServer()
remDr <- remoteDriver(browserName = "phantomjs")
remDr$open()
library(RSelenium)
?phantom
pJS <- phantom()
library(RSelenium)
pJS <- phantom()
Sys.sleep(5) # give the binary a moment
remDr <- remoteDriver(browserName = 'phantomjs')
remDr$open()
install.packages('DSC2014Tutorial', repo = c('http://taiwanrusergroup.github.io/R', 'http://cran.csie.ntu.edu.tw'))
install.packages('dplyr')
install.packages('gdata')
library(slidify)
setwd('~/R_ETL/')
slidify('index.Rmd')
library(dplyr)
library(gdata)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
Cl_info
x=data.frame(c1 = c(1,1,2,3,4,5,5),
c2 = c('A','B','C','D','E','F','G'))
y=data.frame(c1 = c(1,2,2,3,4,6,6),
c2 = c('A','B','C','D','E','F','G'))
inner_join(x,y,by="c1")
anti_join(x,y,by="c1")
slidify('index.Rmd')
slidify('index.Rmd')
install.packages('ggplot2')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages('knitr')
install.packages('knitr')
install.packages("knitr")
